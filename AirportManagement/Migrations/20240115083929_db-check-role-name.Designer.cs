// <auto-generated />
using System;
using AirportManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirportManagement.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240115083929_db-check-role-name")]
    partial class dbcheckrolename
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AirportManagement.Models.Aircraft", b =>
                {
                    b.Property<Guid>("aircraftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("aircraftCapacity")
                        .HasColumnType("int");

                    b.Property<string>("aircraftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("aircraftId");

                    b.HasIndex("aircraftName")
                        .IsUnique();

                    b.ToTable("tblAircraft");
                });

            modelBuilder.Entity("AirportManagement.Models.Airport", b =>
                {
                    b.Property<Guid>("airportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("airportName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("cityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("airportId");

                    b.HasIndex("airportName")
                        .IsUnique();

                    b.HasIndex("cityId");

                    b.ToTable("tblAirport");
                });

            modelBuilder.Entity("AirportManagement.Models.City", b =>
                {
                    b.Property<Guid>("cityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("cityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("countryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("cityId");

                    b.HasIndex("cityName")
                        .IsUnique();

                    b.HasIndex("countryId");

                    b.ToTable("tblCity");
                });

            modelBuilder.Entity("AirportManagement.Models.Country", b =>
                {
                    b.Property<Guid>("countryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("countryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("countryId");

                    b.HasIndex("countryName")
                        .IsUnique();

                    b.ToTable("tblCountry");
                });

            modelBuilder.Entity("AirportManagement.Models.Employee", b =>
                {
                    b.Property<Guid>("employeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("airportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("empRole")
                        .HasColumnType("int");

                    b.Property<string>("employeeAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("employeeEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("employeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("employeePassword")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("employeePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("employeeId");

                    b.HasIndex("airportId");

                    b.HasIndex("employeeAccount")
                        .IsUnique();

                    b.HasIndex("employeeEmail")
                        .IsUnique();

                    b.HasIndex("employeePhone")
                        .IsUnique();

                    b.ToTable("tblEmployee", t =>
                        {
                            t.HasCheckConstraint("ck_emp_role", "empRole IN (0, 1)");
                        });
                });

            modelBuilder.Entity("AirportManagement.Models.Flight", b =>
                {
                    b.Property<Guid>("flightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("aircraftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("cityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("flightCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<DateTime>("reachingTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("runwayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("takeoffTime")
                        .HasColumnType("datetime2");

                    b.HasKey("flightId");

                    b.HasIndex("aircraftId");

                    b.HasIndex("cityId");

                    b.HasIndex("flightCode")
                        .IsUnique();

                    b.HasIndex("runwayId");

                    b.ToTable("tblFlight");
                });

            modelBuilder.Entity("AirportManagement.Models.Luggage", b =>
                {
                    b.Property<Guid>("luggageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("flightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("luggageWeight")
                        .HasColumnType("int");

                    b.Property<Guid>("passengerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("luggageId");

                    b.HasIndex("flightId");

                    b.HasIndex("passengerId");

                    b.ToTable("tblLuggage");
                });

            modelBuilder.Entity("AirportManagement.Models.Passenger", b =>
                {
                    b.Property<Guid>("passengerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("flightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("passengerDOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("passengerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("passengerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("passengerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("passengerId");

                    b.HasIndex("flightId");

                    b.HasIndex("passengerEmail")
                        .IsUnique();

                    b.HasIndex("passengerName")
                        .IsUnique();

                    b.HasIndex("passengerPhone")
                        .IsUnique();

                    b.ToTable("tblPassenger");
                });

            modelBuilder.Entity("AirportManagement.Models.Runway", b =>
                {
                    b.Property<Guid>("runwayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("airportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isRunning")
                        .HasColumnType("bit");

                    b.Property<string>("runwayCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("runwayLength")
                        .HasColumnType("int");

                    b.HasKey("runwayId");

                    b.HasIndex("airportId");

                    b.ToTable("tblRunway");
                });

            modelBuilder.Entity("AirportManagement.Models.SystemRole", b =>
                {
                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Role");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("tblSystemRole", t =>
                        {
                            t.HasCheckConstraint("ck_role_name", "RoleName IN ('Admin', 'Employee')");
                        });
                });

            modelBuilder.Entity("AirportManagement.Models.Airport", b =>
                {
                    b.HasOne("AirportManagement.Models.City", "city")
                        .WithMany("airports")
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("city");
                });

            modelBuilder.Entity("AirportManagement.Models.City", b =>
                {
                    b.HasOne("AirportManagement.Models.Country", "country")
                        .WithMany("cities")
                        .HasForeignKey("countryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("country");
                });

            modelBuilder.Entity("AirportManagement.Models.Employee", b =>
                {
                    b.HasOne("AirportManagement.Models.Airport", "airport")
                        .WithMany()
                        .HasForeignKey("airportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("airport");
                });

            modelBuilder.Entity("AirportManagement.Models.Flight", b =>
                {
                    b.HasOne("AirportManagement.Models.Aircraft", "aircraft")
                        .WithMany()
                        .HasForeignKey("aircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirportManagement.Models.City", "flightDestination")
                        .WithMany()
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirportManagement.Models.Runway", "runway")
                        .WithMany()
                        .HasForeignKey("runwayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("aircraft");

                    b.Navigation("flightDestination");

                    b.Navigation("runway");
                });

            modelBuilder.Entity("AirportManagement.Models.Luggage", b =>
                {
                    b.HasOne("AirportManagement.Models.Flight", "flight")
                        .WithMany("luggages")
                        .HasForeignKey("flightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AirportManagement.Models.Passenger", "passenger")
                        .WithMany("luggages")
                        .HasForeignKey("passengerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("flight");

                    b.Navigation("passenger");
                });

            modelBuilder.Entity("AirportManagement.Models.Passenger", b =>
                {
                    b.HasOne("AirportManagement.Models.Flight", "flight")
                        .WithMany("passengers")
                        .HasForeignKey("flightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("flight");
                });

            modelBuilder.Entity("AirportManagement.Models.Runway", b =>
                {
                    b.HasOne("AirportManagement.Models.Airport", "airport")
                        .WithMany()
                        .HasForeignKey("airportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("airport");
                });

            modelBuilder.Entity("AirportManagement.Models.City", b =>
                {
                    b.Navigation("airports");
                });

            modelBuilder.Entity("AirportManagement.Models.Country", b =>
                {
                    b.Navigation("cities");
                });

            modelBuilder.Entity("AirportManagement.Models.Flight", b =>
                {
                    b.Navigation("luggages");

                    b.Navigation("passengers");
                });

            modelBuilder.Entity("AirportManagement.Models.Passenger", b =>
                {
                    b.Navigation("luggages");
                });
#pragma warning restore 612, 618
        }
    }
}
